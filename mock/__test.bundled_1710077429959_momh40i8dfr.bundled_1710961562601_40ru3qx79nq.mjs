// mock/_test.bundled_1710077429959_momh40i8dfr.mjs
import dayjs from "dayjs";
import Mock from "mockjs";
var { Random } = Mock;
var test_default = [
  {
    url: "/mock/api/user/checkCode",
    method: "get",
    response: () => {
      return {
        code: 0,
        data: Mock.mock({
          "object|2": {
            31e4: "\u4E0A\u6D77\u5E02",
            32e4: "\u6C5F\u82CF\u7701",
            33e4: "\u6D59\u6C5F\u7701",
            34e4: "\u5B89\u5FBD\u7701"
          },
          "number|1-100.1-10": 1,
          ts: Mock.mock('@date("yyyy-MM-dd")'),
          text: Mock.mock("@paragraph(2)"),
          word: Mock.mock("@word"),
          chinese: Mock.mock("@cparagraph()"),
          sentence: Mock.mock("@csentence()"),
          Fname: Random.first(),
          Lname: Random.last(),
          email: Random.email(),
          ip: Random.ip(),
          city: Random.city(),
          country: Random.county(),
          guid: Random.guid(),
          range: Random.range(3, 7),
          int: Random.integer(60, 100),
          float: Random.float(60, 100),
          flag: Random.boolean(),
          array: Mock.mock({
            "array|1-10": ["Mock.js"]
          }),
          image: Random.image("200x100")
        }),
        message: "mock success",
        timestamp: dayjs().format()
      };
    }
  },
  {
    url: "/mock/api/text",
    method: "post",
    rawResponse: async (req, res) => {
      let reqbody = "";
      await new Promise((resolve) => {
        req.on("data", (chunk) => {
          reqbody += chunk;
        });
        req.on("end", () => resolve(void 0));
      });
      res.setHeader("Content-Type", "text/plain");
      res.statusCode = 200;
      res.end(`hello, ${reqbody}`);
    }
  }
];
export {
  test_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibW9jay9tb2NrL3Rlc3QuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9faW5qZWN0ZWRfZmlsZW5hbWVfXyA9IFwiL1VzZXJzL3lhbmppbmJpbi9EZXNrdG9wL2RlbnRhbC9tb2NrL3Rlc3QuanNcIjtjb25zdCBfX2luamVjdGVkX2Rpcm5hbWVfXyA9IFwiL1VzZXJzL3lhbmppbmJpbi9EZXNrdG9wL2RlbnRhbC9tb2NrXCI7Y29uc3QgX19pbmplY3RlZF9pbXBvcnRfbWV0YV91cmxfXyA9IFwiZmlsZTovLy9Vc2Vycy95YW5qaW5iaW4vRGVza3RvcC9kZW50YWwvbW9jay90ZXN0LmpzXCI7aW1wb3J0IGRheWpzIGZyb20gJ2RheWpzJztcbmltcG9ydCBNb2NrIGZyb20gJ21vY2tqcyc7XG5cbmNvbnN0IHsgUmFuZG9tIH0gPSBNb2NrO1xuXG4vLyBcdTc5M0FcdTRGOEIgaHR0cDovL21vY2tqcy5jb20vZXhhbXBsZXMuaHRtbFxuZXhwb3J0IGRlZmF1bHQgW1xuICAgIHtcbiAgICAgICAgdXJsOiAnL21vY2svYXBpL3VzZXIvY2hlY2tDb2RlJyxcbiAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgcmVzcG9uc2U6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY29kZTogMCxcbiAgICAgICAgICAgICAgICBkYXRhOiBNb2NrLm1vY2soe1xuICAgICAgICAgICAgICAgICAgICAnb2JqZWN0fDInOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAzMTAwMDA6ICdcdTRFMEFcdTZENzdcdTVFMDInLFxuICAgICAgICAgICAgICAgICAgICAgICAgMzIwMDAwOiAnXHU2QzVGXHU4MkNGXHU3NzAxJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIDMzMDAwMDogJ1x1NkQ1OVx1NkM1Rlx1NzcwMScsXG4gICAgICAgICAgICAgICAgICAgICAgICAzNDAwMDA6ICdcdTVCODlcdTVGQkRcdTc3MDEnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnbnVtYmVyfDEtMTAwLjEtMTAnOiAxLFxuICAgICAgICAgICAgICAgICAgICB0czogTW9jay5tb2NrKCdAZGF0ZShcInl5eXktTU0tZGRcIiknKSxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogTW9jay5tb2NrKCdAcGFyYWdyYXBoKDIpJyksXG4gICAgICAgICAgICAgICAgICAgIHdvcmQ6IE1vY2subW9jaygnQHdvcmQnKSxcbiAgICAgICAgICAgICAgICAgICAgY2hpbmVzZTogTW9jay5tb2NrKCdAY3BhcmFncmFwaCgpJyksXG4gICAgICAgICAgICAgICAgICAgIHNlbnRlbmNlOiBNb2NrLm1vY2soJ0Bjc2VudGVuY2UoKScpLFxuICAgICAgICAgICAgICAgICAgICBGbmFtZTogUmFuZG9tLmZpcnN0KCksXG4gICAgICAgICAgICAgICAgICAgIExuYW1lOiBSYW5kb20ubGFzdCgpLFxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogUmFuZG9tLmVtYWlsKCksXG4gICAgICAgICAgICAgICAgICAgIGlwOiBSYW5kb20uaXAoKSxcbiAgICAgICAgICAgICAgICAgICAgY2l0eTogUmFuZG9tLmNpdHkoKSxcbiAgICAgICAgICAgICAgICAgICAgY291bnRyeTogUmFuZG9tLmNvdW50eSgpLFxuICAgICAgICAgICAgICAgICAgICBndWlkOiBSYW5kb20uZ3VpZCgpLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogUmFuZG9tLnJhbmdlKDMsIDcpLFxuICAgICAgICAgICAgICAgICAgICBpbnQ6IFJhbmRvbS5pbnRlZ2VyKDYwLCAxMDApLFxuICAgICAgICAgICAgICAgICAgICBmbG9hdDogUmFuZG9tLmZsb2F0KDYwLCAxMDApLFxuICAgICAgICAgICAgICAgICAgICBmbGFnOiBSYW5kb20uYm9vbGVhbigpLFxuICAgICAgICAgICAgICAgICAgICBhcnJheTogTW9jay5tb2NrKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdhcnJheXwxLTEwJzogWydNb2NrLmpzJ10sXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZTogUmFuZG9tLmltYWdlKCcyMDB4MTAwJyksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ21vY2sgc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiBkYXlqcygpLmZvcm1hdCgpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAge1xuICAgICAgICB1cmw6ICcvbW9jay9hcGkvdGV4dCcsXG4gICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgICByYXdSZXNwb25zZTogYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgICAgICAgICBsZXQgcmVxYm9keSA9ICcnO1xuICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgICAgICByZXEub24oJ2RhdGEnLCAoY2h1bmspID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVxYm9keSArPSBjaHVuaztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXEub24oJ2VuZCcsICgpID0+IHJlc29sdmUodW5kZWZpbmVkKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICd0ZXh0L3BsYWluJyk7XG4gICAgICAgICAgICByZXMuc3RhdHVzQ29kZSA9IDIwMDtcbiAgICAgICAgICAgIHJlcy5lbmQoYGhlbGxvLCAke3JlcWJvZHl9YCk7XG4gICAgICAgIH0sXG4gICAgfSxcbl07XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQTRPLE9BQU8sV0FBVztBQUM5UCxPQUFPLFVBQVU7QUFFakIsSUFBTSxFQUFFLE9BQU8sSUFBSTtBQUduQixJQUFPLGVBQVE7RUFDWDtJQUNJLEtBQUs7SUFDTCxRQUFRO0lBQ1IsVUFBVSxNQUFNO0FBQ1osYUFBTztRQUNILE1BQU07UUFDTixNQUFNLEtBQUssS0FBSztVQUNaLFlBQVk7WUFDUixNQUFRO1lBQ1IsTUFBUTtZQUNSLE1BQVE7WUFDUixNQUFRO1VBQ1o7VUFDQSxxQkFBcUI7VUFDckIsSUFBSSxLQUFLLEtBQUsscUJBQXFCO1VBQ25DLE1BQU0sS0FBSyxLQUFLLGVBQWU7VUFDL0IsTUFBTSxLQUFLLEtBQUssT0FBTztVQUN2QixTQUFTLEtBQUssS0FBSyxlQUFlO1VBQ2xDLFVBQVUsS0FBSyxLQUFLLGNBQWM7VUFDbEMsT0FBTyxPQUFPLE1BQU07VUFDcEIsT0FBTyxPQUFPLEtBQUs7VUFDbkIsT0FBTyxPQUFPLE1BQU07VUFDcEIsSUFBSSxPQUFPLEdBQUc7VUFDZCxNQUFNLE9BQU8sS0FBSztVQUNsQixTQUFTLE9BQU8sT0FBTztVQUN2QixNQUFNLE9BQU8sS0FBSztVQUNsQixPQUFPLE9BQU8sTUFBTSxHQUFHLENBQUM7VUFDeEIsS0FBSyxPQUFPLFFBQVEsSUFBSSxHQUFHO1VBQzNCLE9BQU8sT0FBTyxNQUFNLElBQUksR0FBRztVQUMzQixNQUFNLE9BQU8sUUFBUTtVQUNyQixPQUFPLEtBQUssS0FBSztZQUNiLGNBQWMsQ0FBQyxTQUFTO1VBQzVCLENBQUM7VUFDRCxPQUFPLE9BQU8sTUFBTSxTQUFTO1FBQ2pDLENBQUM7UUFDRCxTQUFTO1FBQ1QsV0FBVyxNQUFNLEVBQUUsT0FBTztNQUM5QjtJQUNKO0VBQ0o7RUFFQTtJQUNJLEtBQUs7SUFDTCxRQUFRO0lBQ1IsYUFBYSxPQUFPLEtBQUssUUFBUTtBQUM3QixVQUFJLFVBQVU7QUFDZCxZQUFNLElBQUksUUFBUSxDQUFDLFlBQVk7QUFDM0IsWUFBSSxHQUFHLFFBQVEsQ0FBQyxVQUFVO0FBQ3RCLHFCQUFXO1FBQ2YsQ0FBQztBQUNELFlBQUksR0FBRyxPQUFPLE1BQU0sUUFBUSxNQUFTLENBQUM7TUFDMUMsQ0FBQztBQUNELFVBQUksVUFBVSxnQkFBZ0IsWUFBWTtBQUMxQyxVQUFJLGFBQWE7QUFDakIsVUFBSSxJQUFJLFVBQVUsT0FBTyxFQUFFO0lBQy9CO0VBQ0o7QUFDSjsiLAogICJuYW1lcyI6IFtdCn0K
